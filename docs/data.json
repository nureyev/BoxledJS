{
    "project": {
        "name": "BoxledJS",
        "url": "www.indiegamr.com",
        "version": "0.1.1"
    },
    "files": {
        "..\\src\\b2d\\b2Separator.js": {
            "name": "..\\src\\b2d\\b2Separator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\Box2DUtils.js": {
            "name": "..\\src\\Box2DUtils.js",
            "modules": {},
            "classes": {
                "Box2DUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\Map.js": {
            "name": "..\\src\\Map.js",
            "modules": {},
            "classes": {
                "Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\ObjectLayer.js": {
            "name": "..\\src\\ObjectLayer.js",
            "modules": {},
            "classes": {
                "ObjectLayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\TileLayer.js": {
            "name": "..\\src\\TileLayer.js",
            "modules": {},
            "classes": {
                "TileLayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\Utils.js": {
            "name": "..\\src\\Utils.js",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Box2DUtils": {
            "name": "Box2DUtils",
            "shortname": "Box2DUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\src\\Box2DUtils.js",
            "line": 4,
            "description": "Box2DUtils is a set of utility-methods to help with common Box2D tasks."
        },
        "Map": {
            "name": "Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\src\\Map.js",
            "line": 7,
            "description": "The Map represents a Tiled Map, it is created by passing the JSON data exported from Tiled in the constructor.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The complete map-data as exported to JSON by Tiled.",
                    "type": "Object"
                },
                {
                    "name": "b2dWorld",
                    "description": "The Box2D b2World. Will be created automatically if not supplied.",
                    "type": "B2World",
                    "optional": true
                }
            ]
        },
        "ObjectLayer": {
            "name": "ObjectLayer",
            "shortname": "ObjectLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\src\\ObjectLayer.js",
            "line": 3,
            "description": "An ObjectLayer holds objects such as Box2D bodies or custom classes",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The complete map-data as exported to JSON by Tiled.",
                    "type": "Object"
                },
                {
                    "name": "map",
                    "description": "The map this ObjectLayer is created for.",
                    "type": "Map"
                }
            ]
        },
        "TileLayer": {
            "name": "TileLayer",
            "shortname": "TileLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\src\\TileLayer.js",
            "line": 3,
            "description": "The TileLayer parses all tilelayers as exported by Tiled to JSON.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The tilelayer-data as exported to JSON by Tiled.",
                    "type": "Object"
                },
                {
                    "name": "map",
                    "description": "The map this ObjectLayer is created for.",
                    "type": "Map"
                }
            ]
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\src\\Utils.js",
            "line": 5,
            "description": "Utils is a set of utility-methods to help with common tasks."
        }
    },
    "classitems": [
        {
            "file": "..\\src\\b2d\\b2Separator.js",
            "line": 23,
            "description": "Separates a non-convex polygon into convex polygons and adds them as fixtures to the <code>body</code> parameter.<br/>\nThere are some rules you should follow (otherwise you might get unexpected results) :\n<ul>\n<li>This class is specifically for non-convex polygons. If you want to create a convex polygon, you don't need to use this class - Box2D's <code>b2PolygonShape</code> class allows you to create convex shapes with the <code>setAsArray()</code>/<code>SetAsArray()</code> method.</li>\n<li>The vertices must be in clockwise order.</li>\n<li>No three neighbouring points should lie on the same line segment.</li>\n<li>There must be no overlapping segments and no \"holes\".</li>\n</ul> <p/>",
            "params": [
                {
                    "name": "body",
                    "description": "The b2Body, in which the new fixtures will be stored."
                },
                {
                    "name": "fixtureDef",
                    "description": "A b2FixtureDef, containing all the properties (friction, density, etc.) which the new fixtures will inherit."
                },
                {
                    "name": "verticesArray",
                    "description": "The vertices of the non-convex polygon, in clockwise order."
                },
                {
                    "name": "scale",
                    "description": "<code>[optional]</code> The scale which you use to draw shapes in Box2D. The bigger the scale, the better the precision. The default value is 30."
                }
            ],
            "see": [
                "b2PolygonShape",
                "b2PolygonShape.SetAsArray()",
                "b2PolygonShape.SetAsArray()",
                "b2Fixture"
            ],
            "class": "Box2DUtils"
        },
        {
            "file": "..\\src\\b2d\\b2Separator.js",
            "line": 69,
            "description": "Checks whether the vertices in <code>verticesArray</code> can be properly distributed into the new fixtures (more specifically, it makes sure there are no overlapping segments and the vertices are in clockwise order). \nIt is recommended that you use this method for debugging only, because it may cost more CPU usage.\n<p/>",
            "params": [
                {
                    "name": "verticesArray",
                    "description": "The vertices to be validated."
                }
            ],
            "return": {
                "description": "An integer which can have the following values:\n<ul>\n<li>0 if the vertices can be properly processed.</li>\n<li>1 If there are overlapping lines.</li>\n<li>2 if the points are <b>not</b> in clockwise order.</li>\n<li>3 if there are overlapping lines <b>and</b> the points are <b>not</b> in clockwise order.</li>\n</ul>"
            },
            "class": "Box2DUtils"
        },
        {
            "file": "..\\src\\Box2DUtils.js",
            "line": 14,
            "description": "Converts a set of object definitions into a Box2D b2Body for the world-simulation.",
            "itemtype": "method",
            "name": "makeB2DBodyFromData",
            "static": 1,
            "params": [
                {
                    "name": "objectData",
                    "description": "The data as exported from Tiled to JSON.",
                    "type": "Object"
                },
                {
                    "name": "world",
                    "description": "The Box2D b2World to create the body in.",
                    "type": "B2World"
                }
            ],
            "return": {
                "description": "The created Box2D b2Body.",
                "type": "B2Body"
            },
            "class": "Box2DUtils"
        },
        {
            "file": "..\\src\\Box2DUtils.js",
            "line": 107,
            "description": "Whenever you want to create a custom object that is supposed to interact with the Box2D b2World,\nit is strongly recommended that you call this method in the constructor of your class, see the example below:\n<pre>\nfunction Hero() {\n  var self = this;\n\n  // in the constructor or in a sub-method of the constructor\n  boxledjs.Box2DUtils.injectBox2d(this, boxledjs.Box2DUtils.RECT, 100, 150, 1, 0.5, 0.05);\n\n  // implement this method if you want to apply some special settings after\n  // the body was created\n  this.bxd.onBodyCreated = function(body) { self.onBodyCreated(body) };\n}\n\nHero.prototype.onBodyCreated = function(body) {\n  // for example setting a fixed rotation or more steps\n  body.SetFixedRotation(true);\n  body.SetBullet(true);\n}</pre>\nAfter the injection, the object will have a property called <em>bxd</em>, it holds the <em>body</em> and a <em>sensors</em> object,\nwhere you can check if 'top','left','bottom' or 'right' is currently touching anything.",
            "itemtype": "method",
            "name": "injectBox2d",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The object that the b2Body is injected to",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The type of the body, currently only 'rect' and 'circle' are supported.",
                    "type": "String"
                },
                {
                    "name": "widthOrRadius",
                    "description": "The width of the body, or the radius in case of a circle.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the body (ignored if circle).",
                    "type": "Number"
                },
                {
                    "name": "density",
                    "description": "The density of the body, this correlated to the Box2D-physics model.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "friction",
                    "description": "The friction of the body, this correlated to the Box2D-physics model.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.5"
                },
                {
                    "name": "restitution",
                    "description": "The restitution of the body, this correlated to the Box2D-physics model.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.05"
                },
                {
                    "name": "dynamic",
                    "description": "Defines if the body is supposed to be a dynamic or static(non-moving) body.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Box2DUtils"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 111,
            "description": "Updates the world simulation, forces and force-fields are applied,\nthis should be called on every tick before the stage updates.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "e",
                    "description": "Milliseconds since the last update (will default to 30).",
                    "type": "Number"
                }
            ],
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 181,
            "description": "Sets up the Box2D DebugDraw, this is usually done automatically by the map,\nbut can be called from the outside to setup the DebugDraw with a different canvas.",
            "itemtype": "method",
            "name": "setupDebugDraw",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "HTMLCanvasElement"
                }
            ],
            "return": {
                "description": "",
                "type": "B2DebugDraw"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 202,
            "description": "Draws the Box2D DebugData to the previously setup canvas.\nThe target canvas is the same as the createjs.Stage if not\ndefined otherwise.",
            "itemtype": "method",
            "name": "drawDebugData",
            "params": [
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 224,
            "description": "Sets up the layers from the Tiled map",
            "itemtype": "method",
            "name": "setupLayers",
            "access": "protected",
            "tagname": "",
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 261,
            "description": "Centers the 'camera' to the given object, this can be either\na Box2D Body or an createjs.DisplayObject",
            "itemtype": "method",
            "name": "centerTo",
            "params": [
                {
                    "name": "object",
                    "description": "The object to center the 'camera' on.",
                    "type": "createjs.DisplayObject | Box2D.Dynamics.b2Body"
                }
            ],
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 328,
            "description": "Generates the SpriteSheets from the Tiled tilesets",
            "itemtype": "method",
            "name": "generateTileSets",
            "access": "protected",
            "tagname": "",
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 347,
            "description": "Return the tileset-frame based on a given Tiled tileid.\nNote: Tiled tileids are 1-based, createjs.SpriteSheet-frames are 0-based.\nThis methods requires 1-based tileids.",
            "itemtype": "method",
            "name": "getTileById",
            "params": [
                {
                    "name": "tileid",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "a generic object with image and rect properties. Returns null if the frame does not exist, or the image is not fully loaded.",
                "type": "Object"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 361,
            "description": "Returns the SpriteSheet for a given Tiled tileid.\nNote: Tiled tileids are 1-based, createjs.SpriteSheet-frames are 0-based.\nThis methods requires 1-based tileids.",
            "itemtype": "method",
            "name": "getSpriteSheetByTileId",
            "params": [
                {
                    "name": "tileid",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "createjs.SpriteSheet"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 385,
            "description": "Returns the tile-properties for a given Tiled tileid.\nNote: Tiled tileids are 1-based, createjs.SpriteSheet-frames are 0-based.\nThis methods requires 1-based tileids.",
            "itemtype": "method",
            "name": "getTileProperties",
            "params": [
                {
                    "name": "tileid",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "a generic object containing the tile properties.",
                "type": "Object"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\ObjectLayer.js",
            "line": 69,
            "description": "Initializes all objects from the Tiled-map, by \"objects\" all non-tile-elements are meant. (e.g. custom Collision-shapes)\nThis is usually called on instatiation of the Layer and doesn't need to be executed from the outside.",
            "itemtype": "method",
            "name": "initObjects",
            "access": "protected",
            "tagname": "",
            "class": "ObjectLayer"
        },
        {
            "file": "..\\src\\ObjectLayer.js",
            "line": 145,
            "description": "Creates a useable object from an object defined in Tiled. (e.g. an instance of the defined class)",
            "params": [
                {
                    "name": "objectData",
                    "description": "The data exported by Tiled.",
                    "type": "Object"
                }
            ],
            "class": "ObjectLayer"
        },
        {
            "file": "..\\src\\TileLayer.js",
            "line": 87,
            "description": "Draws the actual tiles to the container\nand creates a Graph-Map for pathfinding.",
            "itemtype": "method",
            "name": "drawTiles",
            "access": "protected",
            "tagname": "",
            "class": "TileLayer"
        },
        {
            "file": "..\\src\\TileLayer.js",
            "line": 142,
            "description": "Calculates the collision shapes, if the layer was marked as a collisionLayer in Tiled.",
            "itemtype": "method",
            "name": "calculateCollisionShapes",
            "access": "protected",
            "tagname": "",
            "class": "TileLayer"
        },
        {
            "file": "..\\src\\TileLayer.js",
            "line": 192,
            "description": "Finds a set of shapes in a row (only horizontal currently)",
            "itemtype": "method",
            "name": "findNextCollisionShapeTile",
            "access": "protected",
            "tagname": "",
            "class": "TileLayer"
        },
        {
            "file": "..\\src\\Utils.js",
            "line": 12,
            "description": "Returns the width of the screen.",
            "itemtype": "method",
            "name": "getScreenWidth",
            "static": 1,
            "return": {
                "description": "the screenWidth",
                "type": "Number"
            },
            "class": "Utils"
        },
        {
            "file": "..\\src\\Utils.js",
            "line": 29,
            "description": "Returns the height of the screen.",
            "itemtype": "method",
            "name": "getScreenHeight",
            "static": 1,
            "return": {
                "description": "the screenHeight",
                "type": "Number"
            },
            "class": "Utils"
        },
        {
            "file": "..\\src\\Utils.js",
            "line": 46,
            "description": "Finds the stage for a createJs.DisplayObject",
            "itemtype": "method",
            "name": "getStage",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The createjs.Stage or null if not found",
                "type": "Stage"
            },
            "class": "Utils"
        },
        {
            "file": "..\\src\\Utils.js",
            "line": 65,
            "description": "This will return the class according to a String describing the classpath+name\ne.g.: 'boxledjs.Map' will return the actual class to be used for instatiation.\nThis is used to reference custom classes in Tiled.",
            "itemtype": "method",
            "name": "getDefinitionByName",
            "static": 1,
            "throws": [
                "{Error} If Class not found"
            ],
            "params": [
                {
                    "name": "className",
                    "description": "The fully qualified name of the class. e.g.: 'boxledjs.Map'",
                    "type": "String"
                },
                {
                    "name": "pkg",
                    "description": "The package to start searching, defaults to 'window'",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "window"
                },
                {
                    "name": "fullPath",
                    "description": "The full path, only used for recursive iterations, not needed for the initial call.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The constructor of the class.",
                "type": "Function"
            },
            "class": "Utils"
        },
        {
            "file": "..\\src\\Utils.js",
            "line": 96,
            "description": "Constructors cannot be executed with '.apply([...])' like methods, this method mocks that.\n(from: http://stackoverflow.com/questions/3871731/dynamic-object-construction-in-javascript)",
            "itemtype": "method",
            "name": "applyConstruct",
            "static": 1,
            "params": [
                {
                    "name": "ctor",
                    "description": "The constructor.",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "The parameters to apply to the constructor.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The instatiated object.",
                "type": "Object"
            },
            "class": "Utils"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nSeparates a non-convex polygon into convex polygons and adds them as fixtures to the <code>body</code> parameter.<br/>\nThere are some rules you should follow (otherwise you might get unexpected results) :\n<ul>\n<li>This class is specifically for non-convex polygons. If you want to create a convex polygon, you don't need to use this class - Box2D's <code>b2PolygonShape</code> class allows you to create convex shapes with the <code>setAsArray()</code>/<code>SetAsArray()</code> method.</li>\n<li>The vertices must be in clockwise order.</li>\n<li>No three neighbouring points should lie on the same line segment.</li>\n<li>There must be no overlapping segments and no \"holes\".</li>\n</ul> <p/>",
            "line": " ..\\src\\b2d\\b2Separator.js:23"
        },
        {
            "message": "Missing item type\nChecks whether the vertices in <code>verticesArray</code> can be properly distributed into the new fixtures (more specifically, it makes sure there are no overlapping segments and the vertices are in clockwise order). \nIt is recommended that you use this method for debugging only, because it may cost more CPU usage.\n<p/>",
            "line": " ..\\src\\b2d\\b2Separator.js:69"
        },
        {
            "message": "Missing item type\nCreates a useable object from an object defined in Tiled. (e.g. an instance of the defined class)",
            "line": " ..\\src\\ObjectLayer.js:145"
        }
    ]
}