{
    "project": {
        "name": "BoxledJS",
        "url": "www.indiegamr.com",
        "version": "0.1.0"
    },
    "files": {
        "..\\src\\b2d\\b2Separator.js": {
            "name": "..\\src\\b2d\\b2Separator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\Map.js": {
            "name": "..\\src\\Map.js",
            "modules": {},
            "classes": {
                "Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\Utils.js": {
            "name": "..\\src\\Utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Map": {
            "name": "Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\src\\Map.js",
            "line": 7,
            "description": "The Map represents a Tiled Map.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The complete map-data as exported to JSON by Tiled.",
                    "type": "Object"
                },
                {
                    "name": "b2dWorld",
                    "description": "The Box2D b2World. Will be created automatically if not supplied.",
                    "type": "B2World",
                    "optional": true
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "..\\src\\b2d\\b2Separator.js",
            "line": 23,
            "description": "Separates a non-convex polygon into convex polygons and adds them as fixtures to the <code>body</code> parameter.<br/>\nThere are some rules you should follow (otherwise you might get unexpected results) :\n<ul>\n<li>This class is specifically for non-convex polygons. If you want to create a convex polygon, you don't need to use this class - Box2D's <code>b2PolygonShape</code> class allows you to create convex shapes with the <code>setAsArray()</code>/<code>SetAsArray()</code> method.</li>\n<li>The vertices must be in clockwise order.</li>\n<li>No three neighbouring points should lie on the same line segment.</li>\n<li>There must be no overlapping segments and no \"holes\".</li>\n</ul> <p/>",
            "params": [
                {
                    "name": "body",
                    "description": "The b2Body, in which the new fixtures will be stored."
                },
                {
                    "name": "fixtureDef",
                    "description": "A b2FixtureDef, containing all the properties (friction, density, etc.) which the new fixtures will inherit."
                },
                {
                    "name": "verticesArray",
                    "description": "The vertices of the non-convex polygon, in clockwise order."
                },
                {
                    "name": "scale",
                    "description": "<code>[optional]</code> The scale which you use to draw shapes in Box2D. The bigger the scale, the better the precision. The default value is 30."
                }
            ],
            "see": [
                "b2PolygonShape",
                "b2PolygonShape.SetAsArray()",
                "b2PolygonShape.SetAsArray()",
                "b2Fixture"
            ],
            "class": "Map"
        },
        {
            "file": "..\\src\\b2d\\b2Separator.js",
            "line": 69,
            "description": "Checks whether the vertices in <code>verticesArray</code> can be properly distributed into the new fixtures (more specifically, it makes sure there are no overlapping segments and the vertices are in clockwise order). \nIt is recommended that you use this method for debugging only, because it may cost more CPU usage.\n<p/>",
            "params": [
                {
                    "name": "verticesArray",
                    "description": "The vertices to be validated."
                }
            ],
            "return": {
                "description": "An integer which can have the following values:\n<ul>\n<li>0 if the vertices can be properly processed.</li>\n<li>1 If there are overlapping lines.</li>\n<li>2 if the points are <b>not</b> in clockwise order.</li>\n<li>3 if there are overlapping lines <b>and</b> the points are <b>not</b> in clockwise order.</li>\n</ul>"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 65,
            "description": "Sets up the Box2D DebugDraw, this is usually done automatically by the map,\nbut can be called from the outside to setup the DebugDraw with a different canvas.",
            "itemtype": "method",
            "name": "setupDebugDraw",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "HTMLCanvasElement"
                }
            ],
            "return": {
                "description": "",
                "type": "B2DebugDraw"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 84,
            "description": "Updates the world simulation, forces and force-fields are applied,\nthis should be called on every tick before the stage updates.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "e",
                    "description": "Milliseconds since the last update (will default to 30).",
                    "type": "Number"
                }
            ],
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 136,
            "description": "Draws the Box2D DebugData to the previously setup canvas.\nThe target canvas is the same as the createjs.Stage if not\ndefined otherwise.",
            "itemtype": "method",
            "name": "drawDebugData",
            "params": [
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 156,
            "description": "Sets up the layers from the Tiled map",
            "itemtype": "method",
            "name": "setupLayers",
            "access": "protected",
            "tagname": "",
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 180,
            "description": "Centers the 'camera' to the given object, this can be either\na Box2D Body or an createjs.DisplayObject",
            "itemtype": "method",
            "name": "centerTo",
            "params": [
                {
                    "name": "object",
                    "description": "The object to center the 'camera' on.",
                    "type": "createjs.DisplayObject | Box2D.Dynamics.b2Body"
                }
            ],
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 219,
            "description": "Generates the SpriteSheets from the Tiled tilesets",
            "itemtype": "method",
            "name": "generateTileSets",
            "access": "protected",
            "tagname": "",
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 238,
            "description": "Return the tileset-frame based on a given Tiled tileid.\nNote: Tiled tileids are 1-based, createjs.SpriteSheet-frames are 0-based.\nThis methods requires 1-based tileids.",
            "itemtype": "method",
            "name": "getTileById",
            "params": [
                {
                    "name": "tileid",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "a generic object with image and rect properties. Returns null if the frame does not exist, or the image is not fully loaded.",
                "type": "Object"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 252,
            "description": "Returns the SpriteSheet for a given Tiled tileid.\nNote: Tiled tileids are 1-based, createjs.SpriteSheet-frames are 0-based.\nThis methods requires 1-based tileids.",
            "itemtype": "method",
            "name": "getSpriteSheetByTileId",
            "params": [
                {
                    "name": "tileid",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "createjs.SpriteSheet"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\Map.js",
            "line": 276,
            "description": "Returns the tile-properties for a given Tiled tileid.\nNote: Tiled tileids are 1-based, createjs.SpriteSheet-frames are 0-based.\nThis methods requires 1-based tileids.",
            "itemtype": "method",
            "name": "getTileProperties",
            "params": [
                {
                    "name": "tileid",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "a generic object containing the tile properties.",
                "type": "Object"
            },
            "class": "Map"
        },
        {
            "file": "..\\src\\Utils.js",
            "line": 72,
            "description": "from: http://stackoverflow.com/questions/3871731/dynamic-object-construction-in-javascript",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nSeparates a non-convex polygon into convex polygons and adds them as fixtures to the <code>body</code> parameter.<br/>\nThere are some rules you should follow (otherwise you might get unexpected results) :\n<ul>\n<li>This class is specifically for non-convex polygons. If you want to create a convex polygon, you don't need to use this class - Box2D's <code>b2PolygonShape</code> class allows you to create convex shapes with the <code>setAsArray()</code>/<code>SetAsArray()</code> method.</li>\n<li>The vertices must be in clockwise order.</li>\n<li>No three neighbouring points should lie on the same line segment.</li>\n<li>There must be no overlapping segments and no \"holes\".</li>\n</ul> <p/>",
            "line": " ..\\src\\b2d\\b2Separator.js:23"
        },
        {
            "message": "Missing item type\nChecks whether the vertices in <code>verticesArray</code> can be properly distributed into the new fixtures (more specifically, it makes sure there are no overlapping segments and the vertices are in clockwise order). \nIt is recommended that you use this method for debugging only, because it may cost more CPU usage.\n<p/>",
            "line": " ..\\src\\b2d\\b2Separator.js:69"
        },
        {
            "message": "Missing item type\nfrom: http://stackoverflow.com/questions/3871731/dynamic-object-construction-in-javascript",
            "line": " ..\\src\\Utils.js:72"
        }
    ]
}